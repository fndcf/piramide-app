// src/app/core/services/firebase.service.ts (SIMPLIFICADO - Foco apenas em couples)
import { Injectable, inject } from '@angular/core';
import { Observable } from 'rxjs';
import { map, catchError } from 'rxjs/operators';
import { of } from 'rxjs';

// ‚úÖ NOVA API FIREBASE MODULAR
import { 
  Firestore, 
  collection, 
  doc, 
  addDoc, 
  updateDoc, 
  deleteDoc, 
  getDoc, 
  getDocs, 
  query, 
  where, 
  orderBy, 
  limit,
  collectionData,
  DocumentData
} from '@angular/fire/firestore';

export interface Couple {
  id?: string;
  player1Name: string;
  player2Name: string;
  responsiblePhone: string;
  createdAt: Date;
  position: number;
  stats: CoupleStats;
}

// ‚úÖ NOVA INTERFACE: Estat√≠sticas da dupla
export interface CoupleStats {
  totalGames: number;
  victories: number;
  defeats: number;
  winRate: number;
  challengesSent: number;
  challengesReceived: number;
  challengesAccepted: number;
  challengesDeclined: number;
  currentStreak: number;
  bestStreak: number;
  lastGameDate?: Date;
}

@Injectable({
  providedIn: 'root'
})
export class FirebaseService {
  private firestore = inject(Firestore);
  private couplesCollection = 'couples';

  // ‚úÖ ADICIONAR DUPLA COM ESTAT√çSTICAS INICIAIS
  async addCouple(couple: Omit<Couple, 'id' | 'position' | 'stats'>): Promise<any> {
    try {
      // Buscar pr√≥xima posi√ß√£o
      const nextPosition = await this.getNextPosition();
      
      // Stats iniciais
      const initialStats: CoupleStats = {
        totalGames: 0,
        victories: 0,
        defeats: 0,
        winRate: 0,
        challengesSent: 0,
        challengesReceived: 0,
        challengesAccepted: 0,
        challengesDeclined: 0,
        currentStreak: 0,
        bestStreak: 0
      };
      
      const coupleData: Couple = {
        ...couple,
        createdAt: new Date(),
        position: nextPosition,
        stats: initialStats
      };
      
      console.log('üìù Adicionando dupla na posi√ß√£o:', nextPosition);
      
      const colRef = collection(this.firestore, this.couplesCollection);
      const docRef = await addDoc(colRef, coupleData);
      
      console.log('‚úÖ Dupla adicionada:', docRef.id);
      return docRef;
    } catch (error) {
      console.error('‚ùå Erro ao adicionar dupla:', error);
      throw error;
    }
  }

  // ‚úÖ LISTAR DUPLAS ORDENADAS POR POSI√á√ÉO (SEM PONTOS)
  getCouples(): Observable<Couple[]> {
    try {
      const q = query(
        collection(this.firestore, this.couplesCollection),
        orderBy('position', 'asc') // ‚úÖ APENAS POR POSI√á√ÉO
      );
      
      return collectionData(q, { idField: 'id' }).pipe(
        map((docs: any[]) => {
          console.log('üìã Duplas carregadas:', docs.length);
          return docs.map(doc => this.mapDocumentToCouple(doc));
        }),
        catchError(error => {
          console.error('‚ùå Erro ao carregar duplas:', error);
          return of([]);
        })
      );
    } catch (error) {
      console.error('‚ùå Erro ao configurar query de duplas:', error);
      return of([]);
    }
  }

  // ‚úÖ BUSCAR DUPLA POR TELEFONE (SEM PONTOS)
  getCoupleByPhone(phone: string): Observable<Couple | null> {
    try {
      const q = query(
        collection(this.firestore, this.couplesCollection),
        where('responsiblePhone', '==', phone),
        limit(1)
      );
      
      return collectionData(q, { idField: 'id' }).pipe(
        map((docs: any[]) => {
          if (docs.length > 0) {
            return this.mapDocumentToCouple(docs[0]);
          }
          return null;
        }),
        catchError(error => {
          console.error('‚ùå Erro ao buscar dupla por telefone:', error);
          return of(null);
        })
      );
    } catch (error) {
      console.error('‚ùå Erro ao configurar query por telefone:', error);
      return of(null);
    }
  }

  // ‚úÖ NOVO M√âTODO: Atualizar estat√≠sticas ap√≥s jogo
  async updateCoupleStats(coupleId: string, won: boolean, gameDate: Date): Promise<void> {
    try {
      const docRef = doc(this.firestore, this.couplesCollection, coupleId);
      const docSnap = await getDoc(docRef);
      
      if (!docSnap.exists()) {
        throw new Error('Dupla n√£o encontrada');
      }
      
      const couple = this.mapDocumentToCouple({ id: docSnap.id, ...docSnap.data() });
      const currentStats = couple.stats;
      
      // ‚úÖ CALCULAR NOVAS ESTAT√çSTICAS
      const newStats: CoupleStats = {
        ...currentStats,
        totalGames: currentStats.totalGames + 1,
        victories: currentStats.victories + (won ? 1 : 0),
        defeats: currentStats.defeats + (won ? 0 : 1),
        lastGameDate: gameDate
      };
      
      // Calcular taxa de vit√≥ria
      newStats.winRate = newStats.totalGames > 0 ? 
        Math.round((newStats.victories / newStats.totalGames) * 100) : 0;
      
      // Calcular sequ√™ncia atual
      if (won) {
        newStats.currentStreak = currentStats.currentStreak >= 0 ? 
          currentStats.currentStreak + 1 : 1;
        newStats.bestStreak = Math.max(newStats.bestStreak, newStats.currentStreak);
      } else {
        newStats.currentStreak = currentStats.currentStreak <= 0 ? 
          currentStats.currentStreak - 1 : -1;
      }
      
      await updateDoc(docRef, { stats: newStats });
      
      console.log(`üìä Estat√≠sticas atualizadas para ${coupleId}:`, newStats);
      
    } catch (error) {
      console.error('‚ùå Erro ao atualizar estat√≠sticas:', error);
      throw error;
    }
  }

  // ‚úÖ NOVO M√âTODO: Atualizar estat√≠sticas de desafio
  async updateChallengeStats(coupleId: string, action: 'sent' | 'received' | 'accepted' | 'declined'): Promise<void> {
    try {
      const docRef = doc(this.firestore, this.couplesCollection, coupleId);
      const docSnap = await getDoc(docRef);
      
      if (!docSnap.exists()) return;
      
      const couple = this.mapDocumentToCouple({ id: docSnap.id, ...docSnap.data() });
      const currentStats = couple.stats;
      
      const updates: Partial<CoupleStats> = {};
      
      switch (action) {
        case 'sent':
          updates.challengesSent = currentStats.challengesSent + 1;
          break;
        case 'received':
          updates.challengesReceived = currentStats.challengesReceived + 1;
          break;
        case 'accepted':
          updates.challengesAccepted = currentStats.challengesAccepted + 1;
          break;
        case 'declined':
          updates.challengesDeclined = currentStats.challengesDeclined + 1;
          break;
      }
      
      await updateDoc(docRef, { 
        [`stats.${Object.keys(updates)[0]}`]: Object.values(updates)[0]
      });
      
    } catch (error) {
      console.error('‚ùå Erro ao atualizar estat√≠sticas de desafio:', error);
    }
  }

  // ‚úÖ TROCAR POSI√á√ïES SIMPLIFICADO (SEM PONTOS)
  async swapPositions(couple1Id: string, couple2Id: string): Promise<void> {
    try {
      // Buscar dados das duas duplas
      const couple1Ref = doc(this.firestore, this.couplesCollection, couple1Id);
      const couple2Ref = doc(this.firestore, this.couplesCollection, couple2Id);
      
      const [couple1Snap, couple2Snap] = await Promise.all([
        getDoc(couple1Ref),
        getDoc(couple2Ref)
      ]);
      
      if (!couple1Snap.exists() || !couple2Snap.exists()) {
        throw new Error('Uma ou ambas as duplas n√£o foram encontradas');
      }
      
      const couple1Position = couple1Snap.data()['position'];
      const couple2Position = couple2Snap.data()['position'];
      
      // Trocar posi√ß√µes
      await Promise.all([
        updateDoc(couple1Ref, { position: couple2Position }),
        updateDoc(couple2Ref, { position: couple1Position })
      ]);
      
      console.log('üîÑ Posi√ß√µes trocadas:', {
        couple1: `${couple1Id}: ${couple1Position} ‚Üí ${couple2Position}`,
        couple2: `${couple2Id}: ${couple2Position} ‚Üí ${couple1Position}`
      });
      
    } catch (error) {
      console.error('‚ùå Erro ao trocar posi√ß√µes:', error);
      throw error;
    }
  }

  // ‚úÖ M√âTODOS AUXILIARES MANTIDOS
  private async getNextPosition(): Promise<number> {
    try {
      const q = query(
        collection(this.firestore, this.couplesCollection),
        orderBy('position', 'desc'),
        limit(1)
      );
      
      const snapshot = await getDocs(q);
      
      if (snapshot.empty) {
        return 1; // Primeira dupla = 1¬∫ lugar
      }
      
      const lastPosition = snapshot.docs[0].data()['position'] || 0;
      return lastPosition + 1; // Pr√≥xima posi√ß√£o
    } catch (error) {
      console.error('‚ùå Erro ao calcular posi√ß√£o:', error);
      return 1;
    }
  }

  // ‚úÖ MAPEAR DOCUMENTO PARA COUPLE (LIMPO)
  private mapDocumentToCouple(doc: any): Couple {
    const defaultStats: CoupleStats = {
      totalGames: 0,
      victories: 0,
      defeats: 0,
      winRate: 0,
      challengesSent: 0,
      challengesReceived: 0,
      challengesAccepted: 0,
      challengesDeclined: 0,
      currentStreak: 0,
      bestStreak: 0
    };

    return {
      id: doc.id,
      player1Name: doc.player1Name,
      player2Name: doc.player2Name,
      responsiblePhone: doc.responsiblePhone,
      createdAt: doc.createdAt?.toDate ? doc.createdAt.toDate() : doc.createdAt,
      position: doc.position || 1,
      stats: doc.stats || defaultStats
    };
  }

  // ‚úÖ EXCLUIR DUPLA E REORGANIZAR POSI√á√ïES
  async deleteCouple(id: string): Promise<void> {
    try {
      // 1. Buscar posi√ß√£o da dupla a ser exclu√≠da
      const docRef = doc(this.firestore, this.couplesCollection, id);
      const docSnap = await getDoc(docRef);
      
      if (!docSnap.exists()) {
        throw new Error('Dupla n√£o encontrada');
      }
      
      const deletedPosition = docSnap.data()['position'];
      
      // 2. Excluir a dupla
      await deleteDoc(docRef);
      
      // 3. Reorganizar posi√ß√µes (todas que estavam abaixo sobem uma posi√ß√£o)
      await this.reorganizePositionsAfterDeletion(deletedPosition);
      
      console.log('‚úÖ Dupla exclu√≠da e posi√ß√µes reorganizadas:', id);
    } catch (error) {
      console.error('‚ùå Erro ao excluir dupla:', error);
      throw error;
    }
  }

  private async reorganizePositionsAfterDeletion(deletedPosition: number): Promise<void> {
    try {
      // Buscar todas as duplas com posi√ß√£o maior que a exclu√≠da
      const q = query(
        collection(this.firestore, this.couplesCollection),
        where('position', '>', deletedPosition)
      );
      
      const snapshot = await getDocs(q);
      
      // Atualizar posi√ß√µes (diminuir 1 de cada)
      const updatePromises = snapshot.docs.map(doc => {
        const currentPosition = doc.data()['position'];
        const newPosition = currentPosition - 1;
        
        return updateDoc(doc.ref, { position: newPosition });
      });
      
      await Promise.all(updatePromises);
      
      console.log(`‚úÖ ${updatePromises.length} posi√ß√µes reorganizadas ap√≥s exclus√£o`);
    } catch (error) {
      console.error('‚ùå Erro ao reorganizar posi√ß√µes:', error);
    }
  }
}